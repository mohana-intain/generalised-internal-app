name: CD - Generalized-internal-app-testing
on:
  push:
    branches: [ master ]
env:
  IMAGE: intainregistry/generalised-internal-app:0.1-rc1
  DEAL: alphaflow
  APP: alphaflow-internal-app
  VALUES_FILE: alphaflow-values
  CONFIGMAP: alphaflow-internal-app-configmap
  NAMESPACE: testing
  FLAG: 1
jobs:
  docker_build_push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2      
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and push docker image
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
        image: intainregistry/generalised-internal-app
        tags: 0.1-rc1
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
  cluster_operations:
    runs-on: ubuntu-latest
    needs: [docker_build_push]
    steps:
    - uses: actions/checkout@v2
    - name: Create kubeconfig
      run: | 
        mkdir ${HOME}/.kube
        echo ${{ secrets.KUBE_CONFIG }} | base64 --decode > ${HOME}/.kube/config
        cat ${HOME}/.kube/config
    - name: Configmap check
      run: |
        cm_array=($(kubectl get cm -n $NAMESPACE | grep 1 | awk '{print $1}')) &&
        arr_length=${#cm_array[@]}
        for (( k=0; k<${arr_length}; k++ ))
              do
                if [ "${CONFIGMAP}" == "${cm_array[k]}" ]; then
                    echo "Strings ${CONFIGMAP} and ${cm_array[k]} are equal"
                    echo "FLAG=1" >> $GITHUB_ENV
                    break
                else
                    echo "Strings ${CONFIGMAP} and ${cm_array[k]} are not equal"
                    echo "FLAG=0" >> $GITHUB_ENV
                fi
              done
    - name: Check the value of FLAG here
      run: | 
        if [ "${{ env.FLAG }}" == "0" ]; then
            kubectl create configmap ${APP}-configmap --from-file=./WSFS_staging_configs/${DEAL}/config.json -n testing
        fi
            
    - name: Prep helm chart
      run: | 
        mv ./helm-chart/${VALUES_FILE}.yaml ./helm-chart/${VALUES_FILE}.old.yaml &&
        cat ./helm-chart/${VALUES_FILE}.old.yaml | grep -v imageReg > ./helm-chart/${VALUES_FILE}.yaml &&
        echo -e "\rimageReg: ${IMAGE}\r\n" >> ./helm-chart/${VALUES_FILE}.yaml &&
        cat ./helm-chart/${VALUES_FILE}.yaml        
    - name: Deploy
      run: helm upgrade ${APP} ./helm-chart --install -n ${NAMESPACE} --values=./helm-chart/${VALUES_FILE}.yaml

